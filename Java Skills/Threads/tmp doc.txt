Java线程

 1.线程安全与不安全
 2.线程同步synchronized和volatile
 3.线程协作 - 生产者/消费者问题
 4.线程中断、线程让步、线程睡眠、线程合并
 5.Timer和TimerTask
 6.线程池
 7. Callable和Future
 8.锁对象Lock-同步问题更完美的处理方式
 9.Condition-线程通信更高效的方式
10.CAS
11.Fork/Join - Java并行计算框架

(篇外篇)线程本地变量ThreadLocal
(篇外篇)阻塞队列BlockingQueue

########################################## next ##############################

Java编程思想之并发（性能优化）

Java编程思想之并发（SE5新特性）

Java编程思想之并发（死锁）

Java编程思想之并发（线程之间的协作）

Java编程思想之并发（终结任务）

Java编程思想之并发（共享资源）

Java编程思想之并发（认识多线程 https://www.imooc.com/u/2162913/articles?label_id=3）

Java多线程01：进程与线程概述
Java多线程02：Thread中的实例方法
Java多线程03：Thread中的静态方法
Java多线程04：synchronized锁机制
Java多线程05：synchronized锁方法块
Java多线程06：synchronized锁定类方法、volatile关键字及其他
Java多线程07：死锁
Java多线程08：wait()和notify() / notifyAll()
Java多线程09：ThreadLocal源码剖析
Java多线程10：ThreadLocal的作用及使用
Java多线程11：ReentrantLock的使用和Condition
Java多线程12：ReentrantLock中的方法
Java多线程13：读写锁和两种同步方式的对比
Java多线程14：生产者/消费者模型
Java多线程15：Queue、BlockingQueue以及利用BlockingQueue实现生产者/消费者模型
Java多线程16：线程组
Java多线程17：中断机制
Java多线程18：线程池
Java多线程19：定时器Timer
Java多线程20：多线程下的其它组件之CountDownLatch、Semaphore、Exchanger
Java多线程21：多线程下的其他组件之CyclicBarrier、Callable、Future和FutureTask
[ https://www.cnblogs.com/xrq730/category/733883.html ]

Java多线程练习 ( https://www.cnblogs.com/meihao1203/p/9181834.html )

Java从单核到多核的多线程（并发） （ https://www.cnblogs.com/GuoJiaSheng/p/3950001.html）

剖析Java线程到底是并行还是并发（ https://gao-xianglong.iteye.com/blog/2399631 ）

Java中的多线程你只要看这一篇就够了 （ https://www.cnblogs.com/wxd0108/p/5479442.html ）

############################## next ##########################

1.Java多线程并行与并发
  并发：多线程运行在同一个CPU内，CPU不停做上下文切换执行任务，单位时间内只有一个线程在运行；
       指两个任务都请求运行，而处理器只能接受一个任务，就把这两个任务安排轮流进行，由于时间间隔较短，使人感觉两个任务都在运行。（表面看是CPU在同时执行多个任务，其实实际上是因为CPU瞬间切换到其他任务的速度特别快，在不同的任务之间一直在不停的切换，给不同的任务分配了不同的时间。）
  并行：多线程运行在多核心CPU内，同时执行任务；
       是两个任务同时运行，就是甲任务进行的同时，乙任务也在进行。（需要多核CPU）

JVM中的多线程
- Java程序的运行原理
  Java命令会启动java虚拟机，启动JVM，等于启动了一个应用程序，也就是启动了一个进程。该进程会自动启动一个“主线程”，然后主线程去调用某个类的main方法。
- JVM的启动
  JVM启动至少启动了垃圾回收线程和主线程，所以是多线程的。

  ############################## next ###################################

  分布式专题

高性能/高并发专题

性能优化专题

https://www.nowcoder.com/discuss/77689

https://blog.51cto.com/14183709/2376243

https://lxlong.iteye.com/blog/2392712



源码分析专题

- Spring源码分析
  Spring的发展背景简介
  SpringIoC / DI深入剖析
  Spring IoC容器设计原理及高级特性
  Spring AOP设计原理及实践
  Spring JDBC设计原理及手写实现
  Spring MVC架构设计原理及手写实现
  Struts2与Spring MVC的比较

- MyBatis源码分析
  MyBatis3简介
  MyBatis3 SqlMap那些事
  数据库连接池到底是什么
  MyBatis3 SessionFactory实现原理
  MyBatis3配置文件详解
  MyBatis3事务管理与集成
  浅谈Hibernate
  MyBatis3与Hibernate框架对比

- Netty源码分析
  NIO通信原理剖析
  深入了解NIO缓冲区Buffer
  NIO Selector原理
  AIO编程
  Netty产生的背景以及基础入门
  Netty高性能之道
  Netty的HTTP与Socket通信原理
  利用Netty搭建高性能的WebSocket聊天室
  Netty聊天室客户端架构实现
  Netty的编码解码
  Netty的拆包粘包操作
  MsgPack原理讲解及各种序列化框架对比
  MsgPack与Netty整合
  Netty HTTP通信与Spring整合
  Netty RPC架构
  Netty与各种架构整合以及Netty源码分析

工程化专题

- maven
  maven的安装使用
  setting.xml，pom.xml知其所以然
  maven使用过程中常见问题
  手写maven插件，避免重复造轮子
  手写archetype
  maven profile的企业级应用
  搭建本地仓库

- git
  git的安装和使用
  常用命令（fetch/pull/push/rebase）
  团队协作git flow
  搭建gitlab环境
  git hook,教你怎么使用钩子

- jenkins
  jenkins的安装使用
  jenkins界面常用功能介绍
  jenkins和git/maven整合
  test/pre/production多环境发布

双十一架构专题

- 分布式压测系统
  最简单的单机压测
  压测应该关注的点
  如何做分布式压测

- 分布式配置系统
  灵活配置热发布
  一切都是为了自动化

- 分布式缓存体系
  五级缓存体系
  热点数据处理

- 秒杀系统实战
  从0到1构建秒杀系统
  从all-in-one到分布式
  从1到100的优化重构

- 分布式跟踪系统
  如何梳理链路依赖
  如何做到优雅降级

- 分布式消息系统
  异步化&系统隔离
  应对瞬时大流量

----------------------------------------------------------------
架构师的职责：

    建立一套Web API风格。要选择注重CRUD的RESTFul式，还是请求自定义性更强的GraphQL式，又或者是简单的JSON-RPC式。架构师必须根据实际需求，做各种决策，为后面各部分整体结合打好基础。

    架构师对于每个环节的执行既要设计，又要保证对每个角色充分理解，必要时不排除动手编写重要环节的功能，而在经验或考虑不足的点上一旦出现问题就必须迅速调整。

    软件架构并不是说把每个部分做到最好再拼凑起来就能达到最佳效果。分成多个部分是解耦，而协作的平衡是内聚。低耦合、高内聚是架构师处理软件各部分协作的终极目标。

----
Java架构师职责：

首先你要是一个高级Java工程师，熟练使用各种框架，并知道它们实现的原理。
- jvm虚拟机原理、调优
  懂得jvm能让你写出性能更好的代码；
- 池技术
  对象池、连接池、线程池...
- java反射技术
  写框架必备的技术，但是有严重的性能问题
  替代方案:java字节码技术（classworking）
- NIO
  注意"直接内存"的特点
  使用场景
- Java多线程
  同步异步
- Java各种集合对象的实现原理
  了解这些可以让你在解决问题时选择合适的数据结构，高效地解决问题，比如hashmap的实现原理，好多五年以上经验的人都弄不清楚
  集合扩容时的性能问题。

熟练使用各种数据结构和算法
- 数组、哈希、链表、排序树...
- 时间换空间与空间换时间

熟练使用linux操作系统

熟悉TCP协议
- 创建连接三次握手和断开连接四次握手的整个过程，不了解的话，无法对高并发网络应用做优化

熟悉HTTP协议
- 尤其是HTTP头
- session和cookie的生命周期以及它们之间的关联

系统集群、负载均衡、反向代理、动静分离、网站静态化

分布式存储系统
- nfs、fastdfs、tfs、Hadoop，了解它们的优缺点、适用场景。

分布式缓存技术
- memcached、redis,提高系统性能必备（一句话，把硬盘上的内容放到内存里来提速）
- 算法一致性hash

工具nginx
- 必备技能，超级好用，高性能、基本不会挂掉的服务器，功能多多，解决各种问题。

数据库的设计能力
- mysql
  基本的参数优化
  慢查询日志分析
  主从复制的配置

NoSql
- MongoDB

队列中间件
  消息推送，可以先把消息写入数据库，推送放队列服务器上，由推送服务器去队列获取处理，这样就可以将消息放数据库和队列里后直接给用户反馈，推送过程则由推送服务器和队列服务器完成。好处是异步处理、缓解服务器压力、解耦系统。

#################################### next ###########################

高薪架构师必须掌握的技术体系
（1）要具备扎实的Java基础
     所谓扎实的Java基础不是通常所理解的Java语法、面向对象的概念，而是能深刻理解Java的多线程开发，熟练使用NIO技术优化网络编程，了解JVM的底层机制，具备底层性能调优的能力。
（2）深入学习常用开源框架
    常用的Spring MyBatis这样的框架是Java里面最经典的教科书，从中能学习到很多写代码的经验技巧，领悟开源框架中蕴含的优雅架构设计之道才是最重要的。
（3）高性能分布式系统设计与应用
    分布式、缓存、消息这样搭建高性能系统的技术必须掌握。
    [关注前端系统有效请求QPS、后端cache的集群峰值w/s等指标]
（4）微服务（分布式服务技术）
    微服务架构是一种架构风格，整个应用被划分并设计为以业务域为模型的松散耦合的独立服务，方便横向扩展能力、伸缩性强、便于开发和维护等等这些是微服务与生俱来的优势。
（5）沟通合作的能力
    依赖于有效的工具

 http://www.sohu.com/a/315949084_100111562?spm=smpc.author.fd-d.3.1559784536390ZFjSOpG
 《都说互联网寒冬，有人却获一线大厂六枚Offer，他是怎么做到的？》
 --------------------------------------------------------------------------------

 分布式系统之所以门槛高，主要体现在三方面：
 涉及到的知识面太广，各个概念又比较相似，区分度不高，比如分布式存储、分布式缓存，RPC、微服务等等，导致学习时经常混淆，有一种云里雾里的感觉；
 对实践的场景要求较高，一般小的项目不会用到这些技能，能接触到分布式系统开发的程序员比例较少，即使知道这些分布式相关的技术概念，也很难去落地，真正地形成技术心智，无法实践的技术很快就会被抛之脑后；
 异常情况巨多，相比单机系统，分布式在每个环节上都要考虑繁杂的异常情况。比如单机系统中不存在的网络异常问题，那么在分布式系统中是家常便饭，任何一个有影响力的分布式框架都会花费大量的代码解决这些异常问题。

 --------------------------------------------------------------------------------
 开源思维导图工具
 - FreeMind
   https://sourceforge.net/projects/freemind/

 - vym
   https://sourceforge.net/projects/vym/


########################### next ####################################

ifeve并发编程网Netty归档：
---------------------------
 基于一致性哈希的分布式内存键值存储
  《NETTY官方文档》4.0的新特性及注意点
  《Netty官方文档》设置开发环境
  《Netty 实战》Netty In Action中文版 第2章 -- 你的第一款Netty应用程序
  《Netty 实战》Netty In Action中文版 -- 文前内容
  《Netty 实战》Netty In Action中文版 第1章 -- Netty -- 异步和事件驱动
  《Netty官方指南》线程模型
  《NETTY官方文档》4.1的新特性及注意点
  《Netty官方文档》5.0中的变化和注意点
  《Netty官方只能》 - 文档链接
  Netty框架中的@Skip使用说明
  Netty源码注释翻译 - Channel类
  Netty 5用户指南
  《Netty 权威指南》 -- 选择Netty的理由
  《Netty 权威指南》 -- 4种IO的对比
  《Netty 权威指南》 -- AIO版本时间服务器运行结果
  Netty-Mina深入学习与对比（二）
  Netty-Mina深入学习与对比（一）
  《Netty 权威指南》目录
  《Netty 权威指南》 -- AIO创建的TimeClient源码分析
  《Netty 权威指南》 -- AIO创建的TimeServer源码分析
  《Netty 权威指南》 -- NIO创建的TimeClient源码分析
  《Netty 权威指南》 -- NIO客户端序列图
  《Netty 权威指南》 -- NIO创建的TimeServer源码分析
  《Netty 权威指南》 -- 服务端序列图
  《Netty 权威指南》 -- NIO类库简介
  《Netty 权威指南》 -- 伪异步IO编程
  《Netty 权威指南》 -- 传统的BIO编程
  《Netty 权威指南》样章
  Netty源码解读（四） Netty与Reactor模式
  Netty源码解读（二） Netty中的buffer
  Netty源码解读（一） 概述
  

  ########################### next ##########################

       